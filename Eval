# -*- coding: utf-8 -*-


import numpy as np
from PIL import Image
from matplotlib import pyplot as plt
import image_slicer
from image_slicer import join
from keras import backend as K
from model import Deeplabv3
import tensorflow as tf
from sklearn.metrics import confusion_matrix  
import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
from sklearn.metrics import average_precision_score
from sklearn.metrics import jaccard_score


# set it based on your directory
net_path = 'F:/Other_data/weights/dataset03_Final_training_0.001,0.0,N_True/trained_model_01.h5'

# set it based on your directory
image_path = 'F:/Other_data/final_test_data/dataset_03/data/20.jpg'
label_path = 'F:/Other_data/final_test_data/dataset_03/mask/20.png'


train_w = 256
train_h = 256
n_class = 11

def predict_label(img, train_w, train_h, deeplab_model):
    img_w, img_h, _ = img.shape
    
    resized_image = np.array(Image.fromarray(img).resize([train_h, train_w]))
    
    res = deeplab_model.predict(np.expand_dims(resized_image, 0))
    res = res.squeeze(axis=0)
    labels = (res >= .5).astype(int)
    
    # merge channels
    labels_1b = labels[:,:,0]*0 + labels[:,:,1]*1+ labels[:,:,2]*2+ labels[:,:,3]*3+ labels[:,:,4]*4+ labels[:,:,5]*5 + labels[:,:,6]*6+labels[:,:,7]*7+labels[:,:,8]*8+labels[:,:,9]*9+labels[:,:,10]*10
    labels_1b = np.where(labels_1b<n_class, labels_1b, 0)
    
    labels = np.array(Image.fromarray(labels_1b).resize([img_h, img_w]))
    
    return labels

def iou_coef_np(y_true, y_pred):
   intersection = np.logical_and(y_true, y_pred)
   union = np.logical_or(y_true, y_pred)  
   iou_score = (np.sum(intersection) / np.sum(union))
   return iou_score*100

if __name__ == '__main__':
    
    deeplab_model = Deeplabv3(weights= 'pascal_voc', input_tensor=None, input_shape=(256, 256, 3), classes=n_class, backbone='xception',
              OS=16, alpha=1., activation='softmax')

    
#weight decay

    new_model = tf.keras.Sequential()
    new_model.add(deeplab_model)
    deeplab_model = new_model
    
    deeplab_model.load_weights(net_path)
    
    
# read image
    image = np.array(Image.open(image_path))
    img_w, img_h, _ = image.shape
    
    
    # read label
    label = np.array(Image.open(label_path))
      
        
    img = np.array(image)
    pre_labels = predict_label(img, train_w, train_h, deeplab_model)
    final_pre_labels = Image.fromarray(pre_labels)
    final_pre_labels = (final_pre_labels.convert('L')).resize([img_h, img_w]) 

    # calculate iou

    y_true = label
    y_pred = np.array(final_pre_labels)
    
    # calculate iou, ...
    y_true_v = np.array(y_true).astype('float32').reshape(y_true.shape[0]*y_true.shape[1], 1)
    y_pred_v = np.array(y_pred).astype('float32').reshape(y_pred.shape[0]*y_pred.shape[1], 1)

    
    #Jaccard_score
    Jaccard_score = 100*(jaccard_score(y_true_v, y_pred_v, average='weighted'))
           
    #calculate  
    iou =iou_coef_np(y_true, y_pred)

    print("IoU:", int(iou) , "%")
    print("Mean IoU:" ,  int(Jaccard_score), "%")
    
    # plot predicted
    fig = plt.figure()
    ii = plt.imshow(y_pred, vmin = -1, vmax = 11, cmap=plt.cm.jet)
    fig.colorbar(ii)
    plt.show() 
    plt.axis('off')


    # plot ground truth
    fig = plt.figure()
    ii = plt.imshow(y_true, vmin = -1, vmax = 11, cmap=plt.cm.jet)
    fig.colorbar(ii)
    plt.show() 
    plt.axis('off')
    
    # plot input image 
    fig = plt.figure()
    ii = plt.imshow(np.array(image).astype('uint8'), interpolation='nearest')
    plt.show() 
    plt.axis('off')
