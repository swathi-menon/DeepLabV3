# -*- coding: utf-8 -*-
"""
Created on Wed Feb 10 04:52:41 2021

@author: SWATHI
"""

import numpy as np
from matplotlib import pyplot as plt
from skimage.transform import AffineTransform, warp
from skimage import io, img_as_ubyte
import random
import os
from scipy.ndimage import rotate

import imageio
import imgaug as ia
import imgaug.augmenters as iaa
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib


import skimage as sk

images_to_generate= 16
seed_for_random = 42

#Define functions for each operation
#Define seed for random to keep the transformation same for image and mask

# Make sure the order of the spline interpolation is 0, default is 3. 
#With interpolation, the pixel values get messed up.
def rotation(image, seed):
    random.seed(seed)
    angle= random.randint(-40,40)
    r_img = rotate(image, angle, mode='constant', reshape=False, order=0)
    return r_img

def h_flip(image, seed):
    hflipped_img= np.fliplr(image)
    return  hflipped_img

def v_flip(image, seed):
    vflipped_img= np.flipud(image)
    return vflipped_img

def v_transl(image, seed):
    random.seed(seed)
    n_pixels = random.randint(-75,75)
    vtranslated_img = np.roll(image, n_pixels, axis=0)
    return vtranslated_img

def h_transl(image, seed):
    random.seed(seed)
    n_pixels = random.randint(-75,75)
    htranslated_img = np.roll(image, n_pixels, axis=1)
    return htranslated_img

def rot90deg(image, seed):
    rot_img = np.rot90(image)
    return rot_img

 
def brightness(image, seed):
    contrast=iaa.GammaContrast(gamma=2.0)
    contrast_image = contrast.augment_image(image)
    return contrast_image

def zoom(image, seed):
    scale_im=iaa.Affine(scale={"x": (1.5, 1.0), "y": (1.5, 1.0)})
    scale_image =scale_im.augment_image(image)
    return scale_image


transformations = {'rotate': rotation,
                      'horizontal flip': h_flip, 
                      'vertical flip': v_flip,
                       'vertical shift': v_transl,
                    'horizontal shift': h_transl,
                    '90deg rotation': rot90deg,
                    'brightness': brightness,
                    'zooming': zoom
                 }                #use dictionary to store names of functions 


images_path="train_data/Dataset_01/original/data/" #path to original images
masks_path = "train_data/Dataset_01/original/mask/"
img_augmented_path="train_data/Dataset_01/augmented/data/" # path to store aumented images
msk_augmented_path="train_data/Dataset_01/augmented/mask/" # path to store aumented images
images=[] # to store paths of images from folder

masks=[]

for im in os.listdir(images_path):  # read image name from folder and append its path into "images" array     
    images.append(os.path.join(images_path,im))

for msk in os.listdir(masks_path):  # read image name from folder and append its path into "images" array     
    masks.append(os.path.join(masks_path,msk))


  # variable to iterate till images_to_generate
ii=1
number = 0

while number < len(images):
    image = images[number]
    mask = masks[number]
    #print(image, mask)
    #image=random.choice(images) #Randomly select an image name
    original_image = io.imread(image)
    original_mask = io.imread(mask)
    transformed_image = None
    transformed_mask = None    
    
    i=1 
    while i<=images_to_generate: 
        # number = random.randint(0, len(images))  #PIck a number to select an image & mask

        #     print(i)
        n = 0       #variable to iterate till number of transformation to apply
        # transformation_count = random.randint(1, len(transformations)) #choose random number of transformation to apply on the image
        transformation_count =len(transformations)
        
        while n < transformation_count:
            # key = random.choice(list(transformations)) #randomly choosing method to call
            key = list(transformations)
            seed = random.randint(1,100)  #Generate seed to supply transformation functions. 
            transformed_image = transformations[key[n]](original_image, seed)
            transformed_mask = transformations[key[n]](original_mask, seed)
            
            
            new_image_path= "%s/augmented_image_2_%s.jpg" %(img_augmented_path, ii)
            new_mask_path = "%s/augmented_mask_2_%s.png" %(msk_augmented_path, ii)   #Do not save as JPG
            io.imsave(new_image_path, transformed_image)
            io.imsave(new_mask_path, transformed_mask)            
                       
            n = n + 1
            ii = ii + 1
        
        i = i + 1
        
    number = number + 1  
